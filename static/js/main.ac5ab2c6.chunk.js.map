{"version":3,"sources":["Timer.js","reducers/timersReducer.js","actions/index.js","reducers/selectedTimerReducer.js","reducers/index.js","components/NewTimer.js","components/TimerView.js","utils/index.js","components/ListTimers.js","App.js","serviceWorker.js","index.js"],"names":["Timer","name","time","isRunning","Component","timersReducer","state","action","type","map","timer","payload","deltaTime","length","newState","index","selectedTimerReducer","combineReducers","timers","timerReducer","selectedTimer","NewTimer","dispatch","useDispatch","useState","setName","className","placeholder","value","onChange","e","target","onClick","addTimer","TimerView","props","ms","Math","round","secs","floor","mins","hrs","formatTime","toggleTimer","ListTimers","useSelector","i","key","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducers","subscribe","throttle","stringify","setItem","console","log","saveState","getState","lastUpdateTime","Date","now","setInterval","update","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac5ab2c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Timer extends Component {\n  constructor(name) {\n    super()\n    this.name = name;\n    this.time = 0;\n    this.isRunning = false;\n  }\n}\n\nvar myTimer = new Timer('Workout');","// Import all of our actions\nimport { NEW_TIMER, TOGGLE_TIMER, UPDATE } from '../actions';\nimport Timer from '../Timer'\n\nconst timersReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE:\n      return state.map((timer) => {\n        if (timer.isRunning) {\n          timer = { ...timer, time: timer.time += action.payload.deltaTime }\n        }\n        return timer\n      })\n    case NEW_TIMER:\n      // Add a new timer, return a copy of state\n      const name = action.payload.name ? action.payload.name : `Timer ${state.length}`\n      return [...state, new Timer(name)]\n\n    case TOGGLE_TIMER:\n      // Invert the isRunning property of timer at index, return a copy of state\n      const newState = state.map((timer, index) => {\n        if (action.payload.index === index) {\n          return {...timer, isRunning: !timer.isRunning}\n        }\n        return timer\n      })\n      return newState\n\n    default:\n      return state;\n  }\n}\n\nexport default timersReducer;","// defining actions that describe how data can be modified\n\nexport const NEW_TIMER = 'NEW_TIMER'\nexport const addTimer = (name) => {\n  return {\n    type: NEW_TIMER,\n    payload: { name }\n  }\n}\n\nexport const TOGGLE_TIMER = 'TOGGLE_TIMER'\nexport const toggleTimer = (index) => {\n  return {\n    type: TOGGLE_TIMER,\n    payload: { index }\n  }\n}\n\n\nexport const SELECT_TIMER = 'SELECT_TIMER'\nexport const selectTimer = (index) => {\n  return {\n    type: SELECT_TIMER,\n    payload: { index }\n  }\n}\n\nexport const UPDATE = \"UPDATE\"\nexport const update = (deltaTime) => {\n  return {\n    type: UPDATE,\n    payload: { deltaTime }\n  }\n}","// Import the SELECT_TIMER action\nimport { SELECT_TIMER } from '../actions';\n\nconst selectedTimerReducer = (state = null, action) => {\n  switch (action.type) {\n    // On the SELECT_TIMER action, set the selectedTimer to the value passed in the payload\n    case SELECT_TIMER:\n      return state = action.payload.index;\n\n    default:\n      return state;\n  }\n}\n\nexport default selectedTimerReducer;","import { combineReducers } from 'redux';\n\nimport timerReducer from './timersReducer';\nimport selectedTimerReducer from './selectedTimerReducer';\n\nexport default combineReducers({\n  timers: timerReducer,              // array\n  selectedTimer: selectedTimerReducer, // int/number\n});","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport './NewTimer.css'\n\n// We need to import our action to add a new timer\nimport { addTimer } from '../actions'\n\nexport default function NewTimer() {\n  const dispatch = useDispatch()\n\tconst [ name, setName ] = useState('')\n\n\treturn (\n\t\t<div className=\"NewTimer\">\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder=\"New Timer Name\"\n\t\t\t\tname=\"name\"\n\t\t\t\tvalue={name}\n\t\t\t\tonChange={(e) => setName(e.target.value)}/>\n\t\t\t<button\n\t\t\t\tonClick={() => dispatch(addTimer(name))}\n\t\t\t>Save</button>\n\t\t</div>\n\t)\n}","import React, {  } from 'react'\nimport { useDispatch } from 'react-redux'\n// Import our toggleTimer action\nimport { toggleTimer } from '../actions'\nimport './TimerView.css'\nimport { formatTime } from '../utils';\n\nexport default function TimerView(props) {\n  // Extract these specific props to use in the component\n  const { index, timer } = props\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"TimerView\">\n      <h2>{timer.name}</h2>\n      <h1>{formatTime(timer.time)}</h1>\n      <button\n        onClick={() => dispatch(toggleTimer(index))}\n      >\n        {timer.isRunning ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  )\n}","const TMRZ_STATE = \"TMRZ_STATE\"\n\n// Load State\nexport const loadState = () => {\n  try {\n  // Grab the state from local storage\n    const serializedState = localStorage.getItem(TMRZ_STATE)\n    if (serializedState === null) {\n      return undefined\n    }\n    // convert the string into JSON for the Redux store\n    return JSON.parse(serializedState)\n  } catch(err) {\n    return undefined\n  }\n}\n\n// Save State\nexport const saveState = (state) => {\n  try {\n    // convert the state from JSON, into a string\n    const serializedState = JSON.stringify(state)\n    // save the state to local storage\n    localStorage.setItem(TMRZ_STATE, serializedState)\n  } catch(err) {\n    console.log(\"Error saving data\")\n  }\n}\n\n\n\n\n\nexport const formatTime = (time) => {\n  const ms = Math.round(time / 100) % 10\n  const secs = Math.floor(time / 1000) % 60\n  const mins = Math.floor(time / 1000 / 60) % 60\n  const hrs = Math.floor(time / 1000 / 1000 / 60) % 60\n  return `${hrs}:${mins}:${secs}.${ms}`\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectTimer } from '../actions'\n\nimport TimerView from './TimerView'\n\nexport default function ListTimers() {\n  const timers = useSelector(state => state.timers)\n  \n\treturn (\n\t\t<div>\n\t\t\t{timers.map((timer, i) => {\n\t\t\t\t// Here the render method maps `this.props.timers` to:\n\t\t\t\treturn (\n\t\t\t\t\t<TimerView \n\t\t\t\t\t\tkey={`timer-${i}`} \n\t\t\t\t\t\ttimer={timer} \n\t\t\t\t\t\tindex={i} \n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}","import React from 'react';\nimport './App.css';\nimport { update } from './actions'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\n// import new components\nimport NewTimer from './components/NewTimer'\nimport ListTimers from './components/ListTimers'\n\nimport { loadState, saveState } from './utils'\nimport throttle from 'lodash/throttle'\n\nconst persistedState = loadState()\nconst store = createStore(reducers, persistedState)\n\nstore.subscribe(throttle(() => {\n  saveState(store.getState())\n}, 1000));\n\nlet lastUpdateTime = Date.now()\nsetInterval(() => {\n  const now = Date.now()\n  const deltaTime = now - lastUpdateTime\n  lastUpdateTime = now\n  store.dispatch(update(deltaTime))\n}, 50)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <h1>TMRZ</h1>\n      {/* Display the new components */}\n      <NewTimer />\n      <ListTimers />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}